/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package it.rockeat.ui;

import it.rockeat.SourceManager;
import it.rockeat.model.RockitAlbum;
import it.rockeat.util.ParsingUtils;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.net.MalformedURLException;
import java.net.URL;

import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author l.frattini
 */
public class RockEatUI extends javax.swing.JFrame implements ActionListener, PropertyChangeListener {

	private static final long serialVersionUID = -1600902258431092978L;
	private SourceManager sourceManager;
    private ParseTask parseTask;
    private DownloadTask downloadTask;

    public void startParsing(String url) {
        try {
            buttonParse.setEnabled(false);
            urlField.setEnabled(false);
            parseTask = new ParseTask(this, url);
            parseTask.addPropertyChangeListener(this);
            parseTask.execute();
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, Messages.ERROR_URL, Messages.TITLE, 1);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, Messages.ERROR_UNEXPECTED, Messages.TITLE, 0);
        }
    }
    
    public void showDialog() {
        String s = (String)JOptionPane.showInputDialog(
            this,
            "Conosci la nuova parola segreta?",
            "RockEat non è in grado di scaricare questo elemento",
            JOptionPane.PLAIN_MESSAGE);
    }


    public void startDownload(RockitAlbum album) {
		buttonParse.setEnabled(true);
		urlField.setEnabled(true);
		progressBar.setIndeterminate(false);
		progressBar.setString("");
		progressBar.setStringPainted(true);
		downloadTask = new DownloadTask(this, album);
		downloadTask.addPropertyChangeListener(this);
		downloadTask.execute();
    }

    public JProgressBar getProgressBar() {
        return progressBar;
    }

    public SourceManager getController() {
        return sourceManager;
    }

    public RockEatUI() {
        sourceManager = new SourceManager();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        sourcePanel = new javax.swing.JPanel();
        urlField = new javax.swing.JTextField();
        buttonParse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(Messages.TITLE);

        urlField.setText("");
        urlField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlFieldActionPerformed(evt);
            }
        });
        urlField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                urlFieldPropertyChange(evt);
            }
        });

        buttonParse.setText("Controlla");
        buttonParse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonParseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sourcePanelLayout = new javax.swing.GroupLayout(sourcePanel);
        sourcePanel.setLayout(sourcePanelLayout);
        sourcePanelLayout.setHorizontalGroup(
            sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sourcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(urlField, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonParse)
                .addContainerGap())
        );
        sourcePanelLayout.setVerticalGroup(
            sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sourcePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonParse)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sourcePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(sourcePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonParseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonParseActionPerformed
       startParsing(urlField.getText());
    }//GEN-LAST:event_buttonParseActionPerformed

    private void urlFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_urlFieldPropertyChange
        urlField.getDocument().addDocumentListener(new DocumentListener() {

            public void enableButtonIfUrlIsValid() {
                try {
                    String urlSt = ParsingUtils.addProtocolPrefixIfMissing(urlField.getText());
                    URL url = new URL(urlSt);
                    buttonParse.setEnabled(true);

                } catch (MalformedURLException ex) {
                    buttonParse.setEnabled(false);
                }
            }

            public void changedUpdate(DocumentEvent e) {
                enableButtonIfUrlIsValid();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                enableButtonIfUrlIsValid();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                enableButtonIfUrlIsValid();
            }
        });




    }//GEN-LAST:event_urlFieldPropertyChange

    private void urlFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_urlFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RockEatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RockEatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RockEatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RockEatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new RockEatUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonParse;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel sourcePanel;
    private javax.swing.JTextField urlField;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            if (evt.getSource() instanceof DownloadTask) {
                DownloadTask task = (DownloadTask) evt.getSource();
                progressBar.setValue((Integer) evt.getNewValue());
                progressBar.setString(task.getLabel());
                progressBar.setStringPainted(true);
            }

            if (evt.getSource() instanceof ParseTask) {
                // ParseTask task = (ParseTask) evt.getSource();                                
                // progressBar.setStringPainted(true);
            }
        }
    }
}
